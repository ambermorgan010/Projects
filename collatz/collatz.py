"""
PURPOSE: Generates the Collatz sequence for a given input.

INPUT: A positive integer

OUTPUT: The Collatz sequence starting with the input number, all on a single
line, with the numbers separated by commas.

The Collatz sequence is generated by applying the following rules to the
current number until the current number reaches 1:
    If the current number is even then divide by two (use integer division).
    If the current number is odd then multiply by three and add one.

It is theorized that this will always reach one, but it has not been
mathematically proven to do so. We also do not know how many iterations are
required for it to reach 1.

AUTHOR: Amber Morgan
"""

def get_pos_int_from_user():
    """
    Reads an integer larger than 1 from the user and returns it to the caller.
    """
    pos_int = input("Enter a positive integer: ")
    while not pos_int.isdigit() or int(pos_int) < 1:
        pos_int = input("Invalid input, try again: ")
    return int(pos_int)


def Collatz(n):
    """
    Takes a single integer argument and returns a list containing all the
    integer values in the Collatz sequence starting with that number.
    """
    lst = [n]
    while n > 1:
        if n % 2 == 0:
            n //= 2
        else:
            n = n * 3 + 1
        lst.append(n)
    return lst


def list_to_str(lst):
    """
    Takes a list of values and returns a string that has each value in the list
    together with a space between them.
    """
    c_str = ''
    for i in lst:
        str_i = str(i)
        c_str += str_i + ' '
    c_str = c_str.strip()
    return c_str


def main():
    n = get_pos_int_from_user()
    sequence = Collatz(n)
    display = list_to_str(sequence)
    print("The Collatz sequence is", display)


if __name__ == "__main__":
    main()
